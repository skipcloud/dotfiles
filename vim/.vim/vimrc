set nocompatible
" Download vim-plug if it isn't installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" The matchit plugin makes the % command work better, but it is not backwards
" compatible.
" The ! means the package won't be loaded right away but when plugins are
" loaded during initialization.
if has('syntax') && has('eval')
  packadd! matchit
endif

" Plugins {{{1
call plug#begin('~/.vim/bundle')
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
" colourschemes
Plug 'jaredgorski/spacecamp'
Plug 'jacoborus/tender.vim'
Plug 'cocopon/iceberg.vim'
Plug 'sonph/onehalf', {'rtp': 'vim/'}

Plug 'jparise/vim-graphql'
Plug 'vim-ruby/vim-ruby'

Plug 'lilydjwg/colorizer'
" snipmate
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'

" UltiSnip
" Plug 'SirVer/ultisnips'

" Postgres
Plug 'lifepillar/pgsql.vim'

" split/join
Plug 'AndrewRadev/splitjoin.vim'

Plug 'scrooloose/syntastic'

" Optional:
Plug 'honza/vim-snippets'

" Autogenerate pair ({[
Plug 'jiangmiao/auto-pairs'

" Navigation tree
Plug 'scrooloose/nerdtree'

" change surrounding brackets/quotes/parens etc
Plug 'tpope/vim-surround'
" handy [ and ] mappings
Plug 'tpope/vim-unimpaired'
" make vim-commentary and vim-surround work with .
Plug 'tpope/vim-repeat'
" Commenting and uncommenting stuff
Plug 'tpope/vim-commentary'
" Git wrapper
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'

Plug 'tpope/vim-bundler'
Plug 'tpope/vim-rbenv'
Plug 'tpope/vim-rails'
" DB extension
Plug 'tpope/vim-dadbod'
Plug 'vim-scripts/dbext.vim'

" Fuzzy search
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" Testing
Plug 'keith/rspec.vim'
Plug 'janko-m/vim-test'

" indent markers
Plug 'Yggdroot/indentLine'

Plug 'SirVer/ultisnips' " Go snippets

" replace grep
Plug 'jremmen/vim-ripgrep'

" markdown folding
Plug 'plasticboy/vim-markdown'

Plug 'cespare/vim-toml'

Plug 'hashivim/vim-terraform'

Plug 'kchmck/vim-coffee-script'

" align text
Plug 'godlygeek/tabular'

" HCL syntax highlighting
Plug 'jvirtanen/vim-hcl'

" JSX syntax highlighting
Plug 'MaxMEllon/vim-jsx-pretty'

Plug 'nanotech/jellybeans.vim'

"" All of your Plugins must be added before the following line
call plug#end()




" Options/Customisations {{{1
" Appearance{{{2

colorscheme jellybeans
set background=dark

" colorscheme onehalflight

" * Iceberg can be either light or dark, depending on the background colour.
" colorscheme iceberg
" set background=dark 
" set background=light

" * Tender colour scheme with highlights
" colorscheme tender
highlight Visual ctermfg=yellow ctermbg=blue " set visual selection colours that stand out
highlight VertSplit ctermfg=white

" colorscheme delek
" colorscheme spacecamp_lite

" Status bar colour - default
" highlight statusline ctermfg=white
" highlight LineNr ctermfg=white

set number   " line numbers
" set relativenumber
set showcmd   " show incomplete cmds down the bottom
set showmode  " show current mode down the bottom
set wildmenu  " display all matching files when tab complete
set ruler     " show the cursor position all the time
set incsearch " incremental search
set hlsearch  " Switch on highlighting the last used search pattern.


if has("mouse_sgr") " fix mouse not working past 220th column and resizing splits
    set ttymouse=sgr
else
    set ttymouse=xterm2
end
" Status bar {{{3

set laststatus=2
set statusline=
set statusline+=%.40F             " file name
set statusline+=%2*%m%*           " modified
set statusline+=\ \-\ Buffer:\ %n " buffer number
set statusline+=%=                " buffer number
set statusline+=\ col\ %c         " column
set statusline+=\ \-\ line\ %l    " line number
" set statusline+=\ \-\ %L           " total lines
set statusline+=\ \-\ %p%%         " percentage through file


" Behaviour {{{2
" General {{{3

set path+=**                   " Set path to search recursively
set tabstop=8 softtabstop=2 expandtab shiftwidth=2 smarttab " default tab behaviour
set autoindent                 " always set autoindenting on
set backspace=start,eol,indent " allow backspace to delete auto indent, newlines
set history=200                " keep 200 lines of command line history
set splitright                 " vertical split to the right
set splitbelow                 " horizontal split below
set nowrap                     " don't wrap lines
set linebreak                  " wrap on whitespace
set clipboard=unnamedplus      " Ensure clipboard works on linux
set ignorecase                 " ignore case in search patterns
set smartcase                  " override ignorecase if searching with capital letters
set completeopt-=preview       " remove scratch pad from autocomplete
set complete+=kspell           " check dictionary when autocompete is used and spell is enabled
set mouse=a                    " this is 'a' by default but for some reason needs set explicitly on my linux machine
set dictionary=/usr/share/dict/words
set spelllang=en

" ripgrep settings
set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case\ --hidden\ --glob\ !vendor

" Alt/Meta key mapping doesn't work on gnome terminal
let c='a'
while c <= 'z'
  exec "set <A-".c.">=\e".c
  exec "imap \e".c." <A-".c.">"
  let c = nr2char(1+char2nr(c))
endw

set timeout ttimeoutlen=20
" Backups/Swap/Undo/Other Directories {{{3

set writebackup                    " protect against crash-during-write
set nobackup                       " but do not persist backup after successful write
set backupcopy=auto                " use rename-and-write-new method whenever safe
set backupdir=$HOME/.vim/.backup//
set swapfile                       " swap file enabled
set directory^=/tmp//              " put them in the tmp directory
set undofile                       " keep an undo file (undo changes after closing)
set undodir^=$HOME/.vim/.undo//
set autowrite                      " save when calling make/next/etc
set tags^=./.git/tags;             " tags file for Fugative

" Plugin options {{{1
" Go related
let g:go_fmt_command = "goimports"
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'

" FZF related
" match theme colours
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" ripgrep
let g:rg_command = 'rg --vimgrep --hidden --glob !vendor --glob !.git'

" testing (open vim terminal when running tests)
let test#strategy = "vimterminal"

" Default SQL type
let g:sql_type_default = 'pgsql'
let g:dadbod_manage_dbext = 1

" Markdown
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
let g:vim_markdown_folding_disabled = 1

" terraform
let g:terraform_fmt_on_save=1

" Snipmate deprecated something
let g:snipMate = { 'snippet_version' : 1 }
" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_javascriptreact_checkers = ['jsxhint']
" Mappings {{{1

let mapleader="," " My leader key
noremap \ ,
" easily get back normal mode
ino jj <esc>
" ins-completion CTRL-X mappings
inoremap ^] ^X^]
inoremap ^F ^X^F
inoremap ^D ^X^D
inoremap ^L ^X^L
map <C-p> :FZF<cr>
nmap <Leader><CR> :nohlsearch<cr>
map <leader>q :NERDTreeToggle<CR>
nnoremap <Leader>w :call TrimWhiteSpace()<cr>
nnoremap <Leader>f :NERDTreeFind<cr>
nnoremap <Leader>gb :Git blame<cr>
nnoremap <Leader>gbr :GBrowse<cr>
vnoremap <Leader>gbr :GBrowse<cr>


" snippets
" imap <C-j> <Plug>snipMateNextOrTrigger
" smap <C-j> <Plug>snipMateNextOrTrigger
imap <leader>s <Plug>snipMateShow

" Functions {{{1
" TrimWhiteSpace trims the whitespace from the ends of lines
fun! TrimWhiteSpace()
  let l:save = winsaveview()
  keeppatterns %s/\s\+$//e
  call winrestview(l:save)
endfun

" CreateYamlDate is will replace the current line with the
" date in rfc 3339 format. It is prepended with the yaml key "date:"
" l:date ends in a null character so remove it before setting
" the line
fun! CreateYamlDate()
  let l:date = system('date --rfc-3339=seconds')
  let l:line = setline('.', 'date: ' . strpart(l:date, 0, strlen(l:date) - 1))
endfun
" Autocmds {{{1
" Only do this part when compiled with support for autocommands.
if has("autocmd")
  augroup vimStartup
    au!
    " For all text files set 'textwidth' to 78 characters.
    autocmd FileType text setlocal textwidth=78

    autocmd FileType gitcommit setlocal spell

    " tab settings for Makefiles
    autocmd FileType make set noexpandtab shiftwidth=8 softtabstop=0

    autocmd BufWritePre *.rb,*.tf,*.proto,*.go,*.c,*.md,*.pkr.hcl :call TrimWhiteSpace()
    " ^N causes included files to be read which slows down
    " autocomplete a hell of a lot
    autocmd BufNewFile,BufRead *spec.rb setlocal complete-=i

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid, when inside an event handler
    " (happens when dropping a file on gvim) and for a commit message (it's
    " likely a different one than last time).
    autocmd BufReadPost *
      \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
      \ |   exe "normal! g`\""
      \ | endif

    " Go related
    autocmd FileType go nmap <buffer> <Leader>i <Plug>(go-info)
    autocmd FileType go nmap <buffer> <Leader>d <Plug>(go-diagnostics)
    autocmd FileType go nmap <buffer> <Leader>e <Plug>(go-describe)
    autocmd FileType go setlocal tabstop=4 softtabstop=4 shiftwidth=4 noexpandtab nowrap

    autocmd BufWritePost .vimrc source $MYVIMRC

    " Markdown: format a paragraph
    autocmd FileType markdown noremap <Leader>o gqap

    autocmd FileType sh setlocal expandtab tabstop=2 softtabstop=2 shiftwidth=2

    " /usr/include/**
    autocmd FileType c set tags+=~/tags
    autocmd FileType c set path+=/usr/include/**

    augroup END
endif " has("autocmd")
" vim:foldmethod=marker
